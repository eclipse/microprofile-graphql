//
// Copyright (c) 2020 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[complexobjects]]
=== Complex objects

In order for an entity class to be defined in the GraphQL schema, it must meet the following criteria:

- It must be the return type or parameter of a query or mutation method, or the return type of a method that has a `@Source` annotation as a parameter.
- It implements an interface that is the return type of query or mutation method, or the return type of a method that has a `@Source` annotation as a parameter.

Optionally it can also:

- Be annotated with `@Type` (for return objects) to name the entity,
- Be annotated with `@Input` (for input parameter) to name the entity,
- Be annotated with `@Interface` (for interfaces) to name the entity,
- Be annotated with `@Union` (for unions) to name the entity,
- Be annotated with `@Name` to name the entity.

The name of the `type`, `input`, `interface`, or `union` will be determined as follows:

- If the value of the `@Type` / `@Input` / `@Interface` / `@Union` annotation is present and not empty, use that as the name, else
- If the value of the `@Name` annotation is present and not empty, use that as the name, else
- Use the Java class name (without the package prefix).

Any Plain Old Java Object (POJO) can be an entity.  No special annotations are required. Implementations of MicroProfile
GraphQL should interpret JSON-B annotations when serializing and deserializing entities to JSON, so it is possible to further define entities
using JSON-B annotations.

JSON-B annotations can be used to help determine schema information as well as data transformation at runtime. In all
cases, annotations in the `org.eclipse.microprofile.graphql` package will trump JSON-B annotations if there is a
conflict.

If the entity cannot be serialized, the implementation must return in a server error to the client.

[[types]]
==== Types vs Input

GraphQL differentiates output types and input types.  Input types are entities that are sent by the client as arguments to
queries or mutations. Types are entities that are sent from the server to the client as return types from queries or
mutations.

In many cases the same Java type can be used for input (sent _from_ the client) and output (sent _to_ the client), but
there are cases where an application may need two different Java types to handle input and output.

The `@Type` annotation is used for output entities while the `@Input` annotation is used for input entities.

Normally these annotations are unnecessary if the type can be serialized and/or deserialized, and if the type
is specified in a query or mutation method. These annotations can be used to specify the name of the type in the GraphQL
schema; by default, the entity name in the schema will be the same as the simple class name of the entity type for
output types; for input types, the simple class name is used with "Input" appended. Thus, an entity class named
`com.mypkg.Tree` would create a GraphQL schema type called "Tree" and an input type called "TreeInput".

[[interfaces]]
==== GraphQL interfaces

It is possible for output types to be defined as a Java interfaces. GraphQL interfaces are very similar in
concept to Java interfaces, in that other types may implement an interface. This
allows the GraphQL schema to better align with the Java application's model and allows clients to retrieve the same data
(fields) on multiple different entity types.  GraphQL interfaces are created with a Java interface type and might be annotated
with `@Interface`. The MP GraphQL implementation must then generate a schema where every class in the application that
implements that Java interface must have a type in the schema that implements the GraphQL interface. For example:

[source,java,numbered]
----
@Interface
public interface Character {
    public String getName();
}

public class SuperHero implements Character {

    private String name;

    @Override
    @Description("Name of hero")
    public String getName() { return name; }

    // ...
}

public class Villain implements Character {

    private String name;

    @Override
    @Description("Name of villain")
    public String getName() { return name; }

    // ...
}
----

This should generate a schema like:

[source,graphql,numbered]
----
interface Character {
  name: String
}

type SuperHero implements Character {
  "Name of hero"
  name: String
  #...
}

type Villain implements Character {
  "Name of villain"
  name: String
  #...
}
----

===== Limitations

At the moment the spec does not support interfaces on input types.

[[unions]]
==== GraphQL unions

Java doesn't have a direct way to represent a GraphQL union, but one can be modeled well using Java interfaces
containing no defined common fields. GraphQL unions are created with a Java interface type and must be annotated
with `@Union`. The MP GraphQL implementation must then generate a schema where every class in the application
that implements that Java interface must have a type in the schema that is a member of the GraphQL union. For
example:

[source,java,numbered]
----
import jdk.jfr.Description;@Union
public interface PowerSource {

}

public class Magic implements PowerSource {

    @NonNull
    @Description("Can this magic be learned")
    private boolean canBeLearned;

    // ...
}

public class GeneticMutation implements PowerSource {

  @NonNull
  @Description("Was this mutation present at birth")
  private boolean isPresentAtBirth;

  @Description("The date this mutation occurred")
  private LocalDate dateOfMutation;

  // ...
}

public class ExtremeWealth implements PowerSource {

  @NonNull
  @Description("The net worth granting this character powers")
  private Float netWorth;

  // ...
}
----

This should generate a schema like:

[source,graphql,numbered]
----
type Magic {
  "Can this magic be learned"
  canBeLearned: Boolean!
  # ...
}

type GeneticMutation {
  "Was this mutation present at birth"
  isPresentAtBirth: Boolean!

  "The date this mutation occurred"
  dateOfMutation: String
  # ...
}

type ExtremeWealth {
  "The net worth granting this character powers"
  netWorth: Float!
}

union PowerSource = Magic | GeneticMutation | ExtremeWealth
----

[[fields]]
==== Fields

Fields in GraphQL are similar to fields in Java in that they are a child of a single entity.  Thus, Java fields on
entity classes are, by default, GraphQL fields of that entity. It is also possible for GraphQL fields that are not part
of the Java entity object to be represented as a field of the GraphQL entity.  This is because all GraphQL fields are
also queries.

Consider the following example:

[source,java,numbered]
----
public class SuperHero {
    private String name;
    private String realName;
    private List<String> superPowers;
    // ...
}
----

The Java fields, `name`, `realName` and `superPowers` are all GraphQL fields of the `SuperHero` entity type. Now
consider this example:

[source,java,numbered]
----
@GraphQLApi
public class MyQueries {

    public String currentLocation(@Source SuperHero hero) {
        return getLocationForHero(hero.getName());
    }
    // ...
}
----

The above query adds a new field to the `SuperHero` GraphQL entity type, called `currentLocation`.  This field is not
part of the `SuperHero` Java class, but _is_ part of the GraphQL entity.  This association is made by using the
`@Source` annotation. Also note that the `currentLocation` method will only be invoked if the client requests the
`currentLocation` field in the query. This is a useful way to prevent looking up data on the server that the client is
not interested in.

The Java code example above will add a field to the SuperHero type in the schema:

[source,graphql,numbered]
----
type SuperHero {
    name: String
    realName: String
    superPowers: [String]
    currentLocation: String
    #...
}
----

You can also choose to expose the method containing the `@Source` annotation as a top-level `Query` by adding the `@Query` annotation:

[source,java,numbered]
----
@GraphQLApi
public class MyQueries {

    @Query
    public Location currentLocation(@Source SuperHero hero) {
        return getLocationForHero(hero.getName());
    }
    // ...
}
----

Above will create the field on SuperHero as described before, and will also add a Query like this:

[source,graphql,numbered]
----
"Query root"
type Query {
    #...
    currentLocation(arg0: SuperHeroInput): String
    #...
}
----

include::naming.asciidoc[]

include::description.asciidoc[]

include::default_values.asciidoc[]

include::ignorable_fields.asciidoc[]

include::non-nullable_fields.asciidoc[]
