//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[errorhandling]]

== Error Handling

In GraphQL applications most errors will either be client, server or transport errors.

Client errors occur when the client has submitted an invalid request. Examples of client errors include specifying a
query or mutation that does not exist, requesting a field on an entity that does not exist, specifying the wrong type of
data (such as specifying an `Int` when the schema requires a `String`), etc.

Server errors occur when the request is valid and is properly transported to the server application but the response is
unexpected or unable to be fulfilled. Examples of server errors include bugs in the application code, a back-end
resource such as a database is down, etc.

Transport errors occur when the request cannot be delivered to the server or when the response cannot be delivered to
the client. Examples of transport errors include network disruption, mis-configured firewalls, etc.

The MP GraphQL specification addresses the handling of client and server errors. Transport error handling is beyond the
scope of this document.

=== Structure

As per the https://graphql.github.io/graphql-spec/June2018/#sec-Errors[GraphQL Specification], errors can be included in the response, 
and each error can contain the following:

* `message` - a string description of the error (mandatory)
* `locations` - a list of locations, where each location is a map with the keys `line` and `column`, both positive numbers starting from 1 which describe the beginning of an associated syntax element to a particular point in the requested GraphQL document. (optional)
* `path` - details the path of the response field which experienced the error (optional)
* `extensions` - this allows implementation to add any additional key-value pairs of information (optional)

.Error Example
[source,json,numbered]
----
{
    "errors": [
        {
            "message": "Validation error of type WrongType: argument 'powerLevel' with value 'StringValue{value='Unlimited'}' is not a valid 'Int' @ 'updateItemPowerLevel'",
            "locations": [
                {
                    "line": 2,
                    "column": 37
                }
            ],
            "extensions": {
                "description": "argument 'powerLevel' with value 'StringValue{value='Unlimited'}' is not a valid 'Int'",
                "validationErrorType": "WrongType",
                "queryPath": [
                    "updateItemPowerLevel"
                ],
                "classification": "ValidationError"
            }
        }
    ],
    "data": null
}
----

In the example above you can see implementation specific usage of the `extensions` section to add more information on the validation error.

=== Client Errors

Client errors must be handled automatically by the implementation. Invalid requests must never result in user
application code invocation. Instead, the implementation must provide the client with an error message that indicates
why the client request was invalid.

=== Server Errors

If the client request is valid, then the implementation must invoke the correct query or mutation method in the user
application. The user application can indicate that an error has occurred by throwing an exception (checked or
unchecked).  When the user application throws and exception, the implementation must send back a response that includes
an error message.

==== Unchecked exceptions

If an unchecked exception is thrown from the user application, the implementation must 'hide' the error message (for security reasons) and replace the `message` with a configured default message. 

The default message is "Server Error" and can be configured by the user using MicroProfile Config and setting the `mp.graphql.defaultErrorMessage` property.

Example:

`mp.graphql.defaultErrorMessage=Unexpected failure in the system. Jarvis is working to fix it.`

Users can allow unchecked exception messages to be included (changing the default behavior as described above) by adding the exception class name to a `whitelist`. This is done using MicroProfile Config and setting the `mp.graphql.exceptionsWhiteList` property (comma-separated list)

Example:

`mp.graphql.exceptionsWhiteList=org.eclipse.microprofile.graphql.tck.apps.superhero.api.WeaknessNotFoundException`

(Note: By default all checked exceptions is on the `whitelist` and all unchecked exception on the `blacklist`)

==== Checked exceptions

By default checked exceptions must include the exception message in the `message` field of the error, and where possible also include the `locations` and `path`.

Implementations must support the ability to 'hide' this message for checked exceptions by allowing users to add them to a `blacklist`. This is done using MicroProfile Config and setting the `mp.graphql.exceptionsBlackList` property (comma-separated list)

Example:

`mp.graphql.exceptionsBlackList=java.io.IOException,java.util.concurrent.TimeoutException`

=== Partial Results

It is possible in GraphQL to send back some results even though the overall request may have failed. 
This is possible by passing the partial results to the `GraphQLException` (or subclass of `GraphQLException`) that is
thrown by the query or mutation method.  For example:

[source,java,numbered]
----
@Query
public Collection<SuperHero> allHeroesFromCalifornia() throws GraphQLException {
    List<SuperHero> westCoastHeroes = new ArrayList<>();
    try {
        for (SuperHero hero : database.getAllHeroes()) {
            if (hero.getPrimaryLocation().contains("California")) {
                westCoastHeroes.add(hero);
            }
        }
    } catch (Exception ex) {
        throw new GraphQLException(ex, westCoastHeroes);
    }
    return westCoastHeroes;
}
----

If an exception is thrown while iterating over of the database collection of heroes or while checking a hero's location,
all previously-processed heroes will still be in the list and will be displayed to the client along with the error
data.

Note that the `partialResults` object passed to the `GraphQLException` must match the return type of the query/mutation
method from which it is thrown. Otherwise the implementation must throw a `ClassCastException` internally resulting in
a much less usable result returned to the client.

It is also possible to send partial results when using multiple methods and the `@Source` annotation. Here is an
example:

[source,java,numbered]
----
@Query
public Collection<SuperHero> allHeroes() {
    return database.getAllHeroes();
}

@Query
public Location currentLocation(@Source SuperHero hero) throws GraphQLException {
    if (hero.hasLocationBlockingPower()) {
        throw new GraphQLException("Unable to determine location for " + hero.getName());
    }
    return database.getLocationForHero(hero);
}
----

Suppose the client issued this query:

[source,graphql,numbered]
----
query allHeroes {
    allHeroes {
        name
        currentLocation
    }
}
----

In this case, if there are any heroes that have a location blocking power, one or more errors will be returned to the
client. However, the names of all of the heroes in the database will be returned as well as the location of all heroes
that do not have a location blocking power.
