//
// Copyright (c) 2019 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[queries]]

Queries allows an user to ask for all or specific fields on an object.

==== API Annotation
In any bean that is annotated with `GraphQLApi` you can mark a method with `@Query` and the implementation must make sure that the 
method is exposed as a GraphQL Query.

The `@Query` annotation is defined in the API:

.QueryAnnotation
[source,java,numbered]
----
@Target(ElementType.METHOD)
@Retention(RetentionPolicy.RUNTIME)
@Documented
public @interface Query {
    String value() default "";
    String description() default "";
}
----

.Parameters
[cols="1,1"]
|===
|*value*|Overrides the field name in the resulting schema, default will be the method name
|*description*|Sets a description on the field, default will be null
|===

==== Basic POJO Example

.Example
[source,java,numbered]
----
@Query
public SuperHero superHero(@Argument("name") String name) {
    LOG.info("superHero invoked");
    return heroDB.getHero(name);
}
----



==== Unnamed queries

